USAGE
    java -jar MCDeploy.jar SUBCOMMAND ARGUMENTS...

SUBCOMMANDS
    help:
        Display this screen.
    version:
        Prints the version of MCDeploy
    new DIRECTORY:
        Create the template project in DIRECTORY. The directory must either not exist or be empty.
    deploy:
        Deploy the configuration specified in 'mcdeploy.toml'
    update:
        Update the deployed server in the current directory according to the configuration in 'mcdeploy.toml'
        The main difference between this and the 'deploy' command is that this command overwrites files,
        and warns the user before doing so.
    write-systemd-service:
        Writes a basic service file that can be ran by systemd. To use it, move it to $XDG_CONFIG_HOME/systemd/user/
        It requires some modification before use, which is printed by the command.
        If you do not use Linux with systemd, you do not have any reason to use this command.
    describe:
        Print help for each of CONFIG_PATHS passed. A Config Path is a dot (.) or slash (/) delimited string,
        describing a specific section in the config file. For example,
        to reference the [Server.JarSource] section you would use one of these Config Paths: 'Server.JarSource' 'Server/JarSource'

CONFIG
    To get info about the config, run this program with the following arguments:
        MCDeploy describe Environment Properties Server Datapacks
    If you are not sure about a config section / value, try to look it up using 'MCDeploy describe'.
    The sections are:
        [Server]
        [Environment]
        [Datapacks]
        [Plugins]
        [Properties]

RETURN VALUE
    0 - Success
    1 - User error
    2 - Server error
    4 - Hash mismatch
    8 - Filesystem error
    Other - Java / Kotlin error, please submit bug report